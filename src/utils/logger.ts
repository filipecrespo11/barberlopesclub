/**
 * SISTEMA DE LOGGING CENTRALIZADO
 * ================================
 * 
 * Sistema profissional de logging com m√∫ltiplos n√≠veis e contextos.
 * Permite controle granular de logs e formata√ß√£o consistente.
 * 
 * FUNCIONALIDADES:
 * - N√≠veis de log: ERROR, WARN, INFO, DEBUG
 * - Contextos espec√≠ficos: Auth, API, Agendamento
 * - Formata√ß√£o com timestamp e m√≥dulo
 * - Controle baseado em ambiente (dev/prod)
 * - Estilos visuais para desenvolvimento
 * - Preparado para integra√ß√£o com servi√ßos externos
 * 
 * USO:
 * - import { logger } from '@/utils/logger';
 * - logger.info('Mensagem', { module: 'ModuleName' });
 * - logger.auth.success('Login realizado', userId);
 * 
 * MANUTEN√á√ÉO:
 * - Para adicionar novos contextos: criar objetos como 'auth', 'api'
 * - Para alterar n√≠veis: modificar LogLevel enum
 * - Para integrar monitoramento: modificar m√©todo error()
 * - Para alterar formato: modificar formatMessage()
 * 
 * @author Sistema de Manuten√ß√£o - Lopes Club
 * @version 2.0
 * @lastModified 2025-09-09
 */

import { APP_CONFIG } from '@/config/app';

/**
 * ENUM DOS N√çVEIS DE LOG
 * ======================
 * Hierarquia: ERROR < WARN < INFO < DEBUG
 * Valores num√©ricos permitem compara√ß√£o de n√≠veis
 */
export enum LogLevel {
  ERROR = 0,  // Apenas erros cr√≠ticos
  WARN = 1,   // Avisos importantes
  INFO = 2,   // Informa√ß√µes gerais
  DEBUG = 3,  // Detalhes de desenvolvimento
}

/**
 * INTERFACE PARA CONTEXTO DO LOG
 * ==============================
 * Permite identificar origem e adicionar metadados
 */
export interface LogContext {
  module: string;        // Nome do m√≥dulo (ex: 'Auth', 'API')
  function?: string;     // Nome da fun√ß√£o espec√≠fica
  userId?: string;       // ID do usu√°rio (para auditoria)
  extra?: Record<string, any>; // Dados adicionais
}

/**
 * CLASSE PRINCIPAL DO LOGGER
 * ==========================
 * Implementa sistema de logging com controle de n√≠veis e formata√ß√£o
 */
class Logger {
  private level: LogLevel;      // N√≠vel atual de logging
  private isDevelopment: boolean; // Flag de ambiente de desenvolvimento

  /**
   * CONSTRUTOR
   * ==========
   * Configura n√≠vel de log baseado no ambiente
   * Desenvolvimento: DEBUG (todos os logs)
   * Produ√ß√£o: WARN (apenas warnings e errors)
   */
  constructor() {
    this.isDevelopment = process.env.NODE_ENV === 'development';
    this.level = this.isDevelopment ? LogLevel.DEBUG : LogLevel.WARN;
  }

  /**
   * VERIFICA√á√ÉO DE N√çVEL
   * ====================
   * Determina se um log deve ser exibido baseado no n√≠vel e configura√ß√£o
   * @param level - N√≠vel do log a ser verificado
   * @returns boolean - Se deve ou n√£o logar
   */
  private shouldLog(level: LogLevel): boolean {
    return level <= this.level && APP_CONFIG.dev.enableLogs;
  }

  /**
   * FORMATA√á√ÉO DE MENSAGEM
   * ======================
   * Cria formato padr√£o: timestamp + n√≠vel + contexto + mensagem
   * @param level - String do n√≠vel (ERROR, WARN, etc.)
   * @param message - Mensagem principal
   * @param context - Contexto opcional com m√≥dulo/fun√ß√£o
   * @returns string - Mensagem formatada
   */
  private formatMessage(level: string, message: string, context?: LogContext): string {
    const timestamp = new Date().toISOString();
    const contextStr = context 
      ? `[${context.module}${context.function ? `::${context.function}` : ''}]`
      : '';
    
    return `${timestamp} ${level} ${contextStr} ${message}`;
  }

  /**
   * LOG COM ESTILO VISUAL
   * =====================
   * Aplica cores e estilos em desenvolvimento para melhor legibilidade
   * @param level - N√≠vel do log
   * @param message - Mensagem
   * @param data - Dados adicionais
   * @param style - CSS style para console
   */
  private logWithStyle(level: string, message: string, data?: any, style?: string) {
    if (this.isDevelopment && style) {
      console.log(`%c${message}`, style, data || '');
    } else {
      console.log(message, data || '');
    }
  }

  // ==========================================
  // M√âTODOS PRINCIPAIS DE LOGGING
  // ==========================================

  /**
   * LOG DE ERRO
   * ===========
   * Para erros cr√≠ticos e exce√ß√µes
   * Em produ√ß√£o, pode integrar com servi√ßos de monitoramento
   */
  error(message: string, context?: LogContext, error?: any) {
    if (!this.shouldLog(LogLevel.ERROR)) return;
    
    const formattedMessage = this.formatMessage('ERROR', message, context);
    console.error(formattedMessage, error || '');
    
    // ==========================================
    // INTEGRA√á√ÉO COM MONITORAMENTO (FUTURO)
    // ==========================================
    // Em produ√ß√£o, enviar para Sentry, LogRocket, etc.
    if (!this.isDevelopment && error) {
      // TODO: Integrar com Sentry, LogRocket, etc.
      // Exemplo: Sentry.captureException(error, { contexts: { custom: context } });
    }
  }

  /**
   * LOG DE AVISO
   * ============
   * Para situa√ß√µes que merecem aten√ß√£o mas n√£o s√£o cr√≠ticas
   */
  warn(message: string, context?: LogContext, data?: any) {
    if (!this.shouldLog(LogLevel.WARN)) return;
    
    const formattedMessage = this.formatMessage('WARN', message, context);
    console.warn(formattedMessage, data || '');
  }

  /**
   * LOG INFORMATIVO
   * ===============
   * Para informa√ß√µes gerais de fluxo da aplica√ß√£o
   * Cor azul em desenvolvimento para destaque visual
   */
  info(message: string, context?: LogContext, data?: any) {
    if (!this.shouldLog(LogLevel.INFO)) return;
    
    const formattedMessage = this.formatMessage('INFO', message, context);
    this.logWithStyle(formattedMessage, '', data, 'color: #2196F3'); // Azul
  }

  /**
   * LOG DE DEBUG
   * ============
   * Para detalhes t√©cnicos durante desenvolvimento
   * Cor verde em desenvolvimento para f√°cil identifica√ß√£o
   */
  debug(message: string, context?: LogContext, data?: any) {
    if (!this.shouldLog(LogLevel.DEBUG)) return;
    
    const formattedMessage = this.formatMessage('DEBUG', message, context);
    this.logWithStyle(formattedMessage, '', data, 'color: #4CAF50'); // Verde
  }

  // ==========================================
  // CONTEXTOS ESPEC√çFICOS PARA M√ìDULOS
  // ==========================================
  // Facilita logging padronizado por √°rea da aplica√ß√£o

  /**
   * CONTEXTO DE AUTENTICA√á√ÉO
   * ========================
   * Logs espec√≠ficos para login, logout, registro, etc.
   * Inclui emojis para f√°cil identifica√ß√£o visual
   */
  auth = {
    success: (message: string, userId?: string) => 
      this.info(`üîê ${message}`, { module: 'Auth', userId }),
    error: (message: string, error?: any) => 
      this.error(`‚ùå ${message}`, { module: 'Auth' }, error),
    debug: (message: string, data?: any) => 
      this.debug(`üîç ${message}`, { module: 'Auth' }, data)
  };

  /**
   * CONTEXTO DE API
   * ===============
   * Logs para requests, responses e erros de API
   * √ötil para debug de integra√ß√µes e performance
   */
  api = {
    request: (endpoint: string, method: string) =>
      this.debug(`üöÄ ${method} ${endpoint}`, { module: 'API' }),
    response: (endpoint: string, status: number, data?: any) =>
      this.debug(`üì• ${endpoint} - ${status}`, { module: 'API' }, data),
    error: (endpoint: string, error: any) =>
      this.error(`‚ùå API Error on ${endpoint}`, { module: 'API' }, error)
  };

  /**
   * CONTEXTO DE AGENDAMENTO
   * =======================
   * Logs espec√≠ficos para sistema de agendamentos
   * Rastreia cria√ß√£o, edi√ß√£o e erros de agendamentos
   */
  agendamento = {
    created: (id: string, data: any) =>
      this.info(`üìÖ Agendamento criado: ${id}`, { module: 'Agendamento' }, data),
    updated: (id: string, data: any) =>
      this.info(`‚úèÔ∏è Agendamento atualizado: ${id}`, { module: 'Agendamento' }, data),
    deleted: (id: string) =>
      this.info(`üóëÔ∏è Agendamento removido: ${id}`, { module: 'Agendamento' }),
    error: (action: string, error: any) =>
      this.error(`‚ùå Erro no agendamento (${action})`, { module: 'Agendamento' }, error)
  };

  // ==========================================
  // FUTURAS EXPANS√ïES DE CONTEXTO
  // ==========================================
  // Adicionar novos contextos conforme necess√°rio:
  // - whatsapp = { sent, error }
  // - payment = { success, failed, pending }
  // - notification = { sent, failed }
}

// ==========================================
// INST√ÇNCIA SINGLETON E EXPORTS
// ==========================================

/**
 * INST√ÇNCIA GLOBAL DO LOGGER
 * ===========================
 * Singleton pattern garante uma √∫nica inst√¢ncia em toda aplica√ß√£o
 * Importar como: import { logger } from '@/utils/logger'
 */
export const logger = new Logger();

// ==========================================
// FUN√á√ïES DE COMPATIBILIDADE
// ==========================================
/**
 * FUN√á√ïES LEGACY PARA COMPATIBILIDADE
 * ====================================
 * Mant√©m compatibilidade com c√≥digo existente
 * RECOMENDA√á√ÉO: Migrar gradualmente para logger.debug() e logger.error()
 */
export const debugLog = (message: string, data?: any) => logger.debug(message, undefined, data);
export const debugError = (message: string, error?: any) => logger.error(message, undefined, error);
