/**
 * SISTEMA DE FORMATA√á√ÉO CENTRALIZADO
 * ===================================
 * 
 * Sistema completo de formata√ß√£o de dados para padroniza√ß√£o visual.
 * Implementa formata√ß√µes espec√≠ficas para o contexto brasileiro.
 * 
 * FUNCIONALIDADES:
 * - Formata√ß√£o de documentos: CPF, telefone, CEP
 * - Formata√ß√£o de valores: moeda brasileira
 * - Formata√ß√£o de datas: data, datetime, time
 * - Formata√ß√£o de texto: nomes pr√≥prios, slugs, truncate
 * - Formata√ß√µes espec√≠ficas: WhatsApp, status, servi√ßos
 * - Utilit√°rios: busca, n√∫meros apenas
 * 
 * PADR√ïES UTILIZADOS:
 * - Intl API para formata√ß√£o internacionalizada
 * - Regex para limpeza e formata√ß√£o
 * - Normaliza√ß√£o Unicode para remo√ß√£o de acentos
 * - Padr√µes brasileiros (pt-BR)
 * 
 * USO:
 * - import { Formatter } from '@/utils/formatter';
 * - const formatted = Formatter.phone('11999999999');
 * - const price = Formatter.currency(19.99);
 * 
 * MANUTEN√á√ÉO:
 * - Para novos formatos: adicionar m√©todos est√°ticos
 * - Para alterar padr√µes: modificar regex ou Intl configs
 * - Para novos status/servi√ßos: atualizar mapeamentos
 * - Para localiza√ß√µes: alterar 'pt-BR' para outros locales
 * 
 * @author Sistema de Manuten√ß√£o - Lopes Club
 * @version 2.0
 * @lastModified 2025-09-09
 */

/**
 * CLASSE PRINCIPAL DE FORMATA√á√ÉO
 * ===============================
 * Todos os m√©todos s√£o est√°ticos para facilitar uso direto
 */
export class Formatter {
  
  // ==========================================
  // FORMATA√á√ïES DE DOCUMENTOS BRASILEIROS
  // ==========================================
  
  /**
   * FORMATA√á√ÉO DE TELEFONE BRASILEIRO
   * =================================
   * Formatos aceitos: (11) 99999-9999 ou (11) 9999-9999
   * Remove caracteres n√£o num√©ricos e aplica m√°scara
   * 
   * EXEMPLOS:
   * - "11999999999" ‚Üí "(11) 99999-9999"
   * - "1133334444" ‚Üí "(11) 3333-4444"
   * 
   * @param value - N√∫mero de telefone sem formata√ß√£o
   * @returns string - Telefone formatado
   */
  static phone(value: string): string {
    const numbers = value.replace(/\D/g, ''); // Remove tudo que n√£o √© n√∫mero
    
    if (numbers.length <= 2) return numbers;
    if (numbers.length <= 7) return `(${numbers.slice(0, 2)}) ${numbers.slice(2)}`;
    if (numbers.length <= 11) {
      return `(${numbers.slice(0, 2)}) ${numbers.slice(2, 7)}-${numbers.slice(7, 11)}`;
    }
    
    // Trunca se tiver mais de 11 d√≠gitos
    return `(${numbers.slice(0, 2)}) ${numbers.slice(2, 7)}-${numbers.slice(7, 11)}`;
  }

  /**
   * FORMATA√á√ÉO DE CPF
   * =================
   * Formato padr√£o: 000.000.000-00
   * Remove caracteres n√£o num√©ricos e aplica m√°scara
   * 
   * EXEMPLO:
   * - "12345678901" ‚Üí "123.456.789-01"
   * 
   * @param value - CPF sem formata√ß√£o
   * @returns string - CPF formatado
   */
  static cpf(value: string): string {
    const numbers = value.replace(/\D/g, '');
    
    if (numbers.length <= 3) return numbers;
    if (numbers.length <= 6) return `${numbers.slice(0, 3)}.${numbers.slice(3)}`;
    if (numbers.length <= 9) return `${numbers.slice(0, 3)}.${numbers.slice(3, 6)}.${numbers.slice(6)}`;
    
    // Formato completo
    return `${numbers.slice(0, 3)}.${numbers.slice(3, 6)}.${numbers.slice(6, 9)}-${numbers.slice(9, 11)}`;
  }

  /**
   * FORMATA√á√ÉO DE CEP
   * =================
   * Formato padr√£o: 00000-000
   * Remove caracteres n√£o num√©ricos e aplica m√°scara
   * 
   * EXEMPLO:
   * - "01234567" ‚Üí "01234-567"
   * 
   * @param value - CEP sem formata√ß√£o
   * @returns string - CEP formatado
   */
  static cep(value: string): string {
    const numbers = value.replace(/\D/g, '');
    
    if (numbers.length <= 5) return numbers;
    return `${numbers.slice(0, 5)}-${numbers.slice(5, 8)}`;
  }

  // ==========================================
  // FORMATA√á√ïES DE VALORES E DATAS
  // ==========================================

  /**
   * FORMATA√á√ÉO DE MOEDA BRASILEIRA
   * ===============================
   * Usa Intl.NumberFormat para formata√ß√£o padr√£o BRL
   * 
   * EXEMPLO:
   * - 19.99 ‚Üí "R$ 19,99"
   * - 1000 ‚Üí "R$ 1.000,00"
   * 
   * @param value - Valor num√©rico
   * @returns string - Valor formatado em reais
   */
  static currency(value: number): string {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(value);
  }

  /**
   * FORMATA√á√ÉO DE DATA
   * ==================
   * Formato brasileiro: dd/mm/yyyy
   * Aceita Date object ou string ISO
   * 
   * EXEMPLO:
   * - new Date('2025-09-09') ‚Üí "09/09/2025"
   * 
   * @param date - Data como Date ou string
   * @returns string - Data formatada
   */
  static date(date: Date | string): string {
    const d = typeof date === 'string' ? new Date(date) : date;
    
    return new Intl.DateTimeFormat('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    }).format(d);
  }

  /**
   * FORMATA√á√ÉO DE DATA E HORA
   * =========================
   * Formato brasileiro: dd/mm/yyyy hh:mm
   * Aceita Date object ou string ISO
   * 
   * EXEMPLO:
   * - new Date('2025-09-09T15:30') ‚Üí "09/09/2025 15:30"
   * 
   * @param date - Data como Date ou string
   * @returns string - Data e hora formatadas
   */
  static datetime(date: Date | string): string {
    const d = typeof date === 'string' ? new Date(date) : date;
    
    return new Intl.DateTimeFormat('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(d);
  }

  /**
   * FORMATA√á√ÉO DE HOR√ÅRIO
   * =====================
   * Garante formato hh:mm com zeros √† esquerda
   * 
   * EXEMPLO:
   * - "9:5" ‚Üí "09:05"
   * 
   * @param time - Hor√°rio em formato h:m ou hh:mm
   * @returns string - Hor√°rio formatado
   */
  static time(time: string): string {
    const [hours, minutes] = time.split(':');
    return `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;
  }

  // ==========================================
  // FORMATA√á√ïES DE TEXTO
  // ==========================================

  /**
   * FORMATA√á√ÉO DE NOME PR√ìPRIO
   * ===========================
   * Primeira letra de cada palavra em mai√∫scula
   * √ötil para padronizar nomes de usu√°rios
   * 
   * EXEMPLO:
   * - "jo√£o silva santos" ‚Üí "Jo√£o Silva Santos"
   * 
   * @param name - Nome a ser formatado
   * @returns string - Nome formatado
   */
  static properName(name: string): string {
    return name
      .toLowerCase()
      .split(' ')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }

  /**
   * FORMATA√á√ÉO PARA URL AMIG√ÅVEL (SLUG)
   * ===================================
   * Converte texto em formato URL-friendly
   * Remove acentos, caracteres especiais e espa√ßos
   * 
   * EXEMPLO:
   * - "Corte de Cabelo Masculino" ‚Üí "corte-de-cabelo-masculino"
   * 
   * @param text - Texto a ser convertido
   * @returns string - Slug formatado
   */
  static slug(text: string): string {
    return text
      .toLowerCase()
      .normalize('NFD')                    // Decomposi√ß√£o de caracteres Unicode
      .replace(/[\u0300-\u036f]/g, '')     // Remove acentos
      .replace(/[^a-z0-9\s-]/g, '')        // Remove caracteres especiais
      .trim()
      .replace(/\s+/g, '-');               // Substitui espa√ßos por h√≠fens
  }

  /**
   * TRUNCAR TEXTO COM RETIC√äNCIAS
   * ==============================
   * Corta texto mantendo legibilidade
   * Adiciona "..." quando necess√°rio
   * 
   * EXEMPLO:
   * - truncate("Texto muito longo", 10) ‚Üí "Texto m..."
   * 
   * @param text - Texto a ser truncado
   * @param maxLength - Tamanho m√°ximo
   * @returns string - Texto truncado
   */
  static truncate(text: string, maxLength: number): string {
    if (text.length <= maxLength) return text;
    return text.slice(0, maxLength - 3) + '...';
  }

  // ==========================================
  // FORMATA√á√ïES ESPEC√çFICAS DO SISTEMA
  // ==========================================

  /**
   * FORMATA√á√ÉO DE TELEFONE PARA WHATSAPP
   * ====================================
   * Prepara n√∫mero para integra√ß√£o com WhatsApp API
   * Adiciona c√≥digo do pa√≠s (55) e trata n√∫meros antigos
   * 
   * L√ìGICA:
   * - Adiciona 55 (Brasil) no in√≠cio
   * - Mant√©m 9¬∫ d√≠gito para celulares atuais
   * - Compat√≠vel com n√∫meros antigos de SP/RJ
   * 
   * EXEMPLO:
   * - "11999999999" ‚Üí "5511999999999"
   * 
   * @param phone - N√∫mero de telefone
   * @returns string - N√∫mero formatado para WhatsApp
   */
  static whatsappPhone(phone: string): string {
    const numbers = phone.replace(/\D/g, '');
    
    // Lista de DDDs que precisam de tratamento especial (SP/RJ principalmente)
    const specialCodes = ['11', '12', '13', '14', '15', '16', '17', '18', '19', '21', '22', '24'];
    
    // Verifica se √© celular antigo que precisa do 9
    if (numbers.length === 11 && specialCodes.includes(numbers.slice(0, 2))) {
      if (numbers.charAt(2) === '9') {
        return '55' + numbers; // J√° tem o 9, mant√©m
      }
    }
    
    return '55' + numbers; // Adiciona c√≥digo do pa√≠s
  }

  /**
   * FORMATA√á√ÉO DE STATUS DE AGENDAMENTO
   * ===================================
   * Retorna formata√ß√£o visual para status de agendamentos
   * Inclui texto, cor e emoji para melhor UX
   * 
   * @param status - Status do agendamento
   * @returns object - Texto, cor e √≠cone formatados
   */
  static agendamentoStatus(status: string): { text: string; color: string; icon: string } {
    const statusMap = {
      'pendente':   { text: 'Pendente',   color: 'yellow', icon: '‚è≥' },
      'confirmado': { text: 'Confirmado', color: 'green',  icon: '‚úÖ' },
      'cancelado':  { text: 'Cancelado',  color: 'red',    icon: '‚ùå' },
      'concluido':  { text: 'Conclu√≠do', color: 'blue',   icon: 'üèÅ' },
      'reagendado': { text: 'Reagendado', color: 'orange', icon: 'üìÖ' }
    };
    
    return statusMap[status as keyof typeof statusMap] || 
           { text: status, color: 'gray', icon: '‚ùì' };
  }

  /**
   * FORMATA√á√ÉO DE TIPO DE SERVI√áO
   * ==============================
   * Retorna formata√ß√£o visual para tipos de servi√ßos
   * Inclui texto descritivo e emoji identificador
   * 
   * @param servico - Tipo de servi√ßo
   * @returns object - Texto e √≠cone formatados
   */
  static servicoType(servico: string): { text: string; icon: string } {
    const servicoMap = {
      'corte':        { text: 'Corte de Cabelo',    icon: '‚úÇÔ∏è' },
      'barba':        { text: 'Barba',              icon: 'ü™í' },
      'corte-barba':  { text: 'Corte + Barba',     icon: 'üíá‚Äç‚ôÇÔ∏è' },
      'sobrancelha':  { text: 'Sobrancelha',       icon: 'üëÅÔ∏è' },
      'outros':       { text: 'Outros Servi√ßos',   icon: 'üõ†Ô∏è' }
    };
    
    return servicoMap[servico as keyof typeof servicoMap] || 
           { text: servico, icon: '‚ùì' };
  }

  // ==========================================
  // UTILIT√ÅRIOS DE FORMATA√á√ÉO
  // ==========================================

  /**
   * LIMPAR FORMATA√á√ÉO (APENAS N√öMEROS)
   * ===================================
   * Remove todos os caracteres n√£o num√©ricos
   * √ötil para preparar dados para APIs
   * 
   * EXEMPLO:
   * - "(11) 99999-9999" ‚Üí "11999999999"
   * 
   * @param value - Texto com formata√ß√£o
   * @returns string - Apenas n√∫meros
   */
  static numbersOnly(value: string): string {
    return value.replace(/\D/g, '');
  }

  /**
   * FORMATA√á√ÉO DE TEXTO PARA BUSCA
   * ===============================
   * Padroniza texto para facilitar buscas
   * Remove acentos, espa√ßos extras e normaliza case
   * 
   * UTILIDADE:
   * - Compara√ß√£o de strings ignoring case/accents
   * - Busca fuzzy em listas
   * - Indexa√ß√£o de texto
   * 
   * EXEMPLO:
   * - "Jo√£o da Silva" ‚Üí "joao da silva"
   * 
   * @param text - Texto a ser normalizado
   * @returns string - Texto normalizado para busca
   */
  static searchText(text: string): string {
    return text
      .toLowerCase()                       // Converte para min√∫sculas
      .normalize('NFD')                    // Decomposi√ß√£o Unicode
      .replace(/[\u0300-\u036f]/g, '')     // Remove acentos
      .replace(/\s+/g, ' ')                // Normaliza espa√ßos
      .trim();                             // Remove espa√ßos das bordas
  }

  // ==========================================
  // FUTURAS FORMATA√á√ïES
  // ==========================================
  // Adicionar conforme necess√°rio:
  // - static cnpj(value: string): string
  // - static rg(value: string): string  
  // - static percentage(value: number): string
  // - static fileSize(bytes: number): string
  // - static duration(seconds: number): string
}
